
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 29 19:28:31 EST 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Nov 29 19:28:31 EST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\003\006\000\002\004" +
    "\004\000\002\004\002\000\002\005\010\000\002\005\006" +
    "\000\002\005\007\000\002\005\011\000\002\010\004\000" +
    "\002\010\002\000\002\024\003\000\002\024\002\000\002" +
    "\022\003\000\002\022\002\000\002\026\003\000\002\026" +
    "\005\000\002\027\004\000\002\027\006\000\002\023\003" +
    "\000\002\023\002\000\002\011\015\000\002\012\004\000" +
    "\002\012\002\000\002\013\005\000\002\013\007\000\002" +
    "\013\005\000\002\013\007\000\002\013\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\007\000\002\013\005" +
    "\000\002\013\004\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\032\005\000\002\032\003\000\002" +
    "\032\002\000\002\031\005\000\002\031\003\000\002\030" +
    "\005\000\002\030\003\000\002\025\007\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\006\000\002" +
    "\017\004\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\020\003\000\002\020\006\000" +
    "\002\021\003\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\061\005\001\002\000\004\002\240\001" +
    "\002\000\004\004\006\001\002\000\012\002\ufffe\016\007" +
    "\060\ufffe\062\012\001\002\000\004\004\234\001\002\000" +
    "\006\002\ufff8\060\117\001\002\000\036\002\ufffe\004\ufffe" +
    "\016\007\023\ufffe\024\ufffe\036\ufffe\040\ufffe\041\ufffe\051" +
    "\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\062\012\001\002" +
    "\000\004\004\013\001\002\000\010\021\015\027\017\050" +
    "\014\001\002\000\020\012\uffd3\013\uffd3\026\uffd3\030\uffd3" +
    "\031\uffd3\040\uffd3\044\uffd3\001\002\000\020\012\uffd4\013" +
    "\uffd4\026\uffd4\030\uffd4\031\uffd4\040\uffd4\044\uffd4\001\002" +
    "\000\010\012\021\013\020\044\022\001\002\000\020\012" +
    "\uffd5\013\uffd5\026\uffd5\030\uffd5\031\uffd5\040\uffd5\044\uffd5" +
    "\001\002\000\036\002\ufffc\004\ufffc\016\ufffc\023\ufffc\024" +
    "\ufffc\036\ufffc\040\ufffc\041\ufffc\051\ufffc\053\ufffc\054\ufffc" +
    "\057\ufffc\060\ufffc\062\ufffc\001\002\000\004\005\113\001" +
    "\002\000\030\004\031\005\034\006\030\007\026\021\015" +
    "\027\017\030\032\033\023\045\041\050\014\052\027\001" +
    "\002\000\044\010\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe" +
    "\022\uffbe\025\uffbe\026\uffbe\031\uffbe\032\uffbe\034\uffbe\037" +
    "\uffbe\040\uffbe\042\uffbe\043\uffbe\046\uffbe\047\uffbe\001\002" +
    "\000\010\010\072\013\112\015\070\001\002\000\004\030" +
    "\107\001\002\000\044\010\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\017\uffbb\022\uffbb\025\uffbb\026\uffbb\031\uffbb\032\uffbb\034" +
    "\uffbb\037\uffbb\040\uffbb\042\uffbb\043\uffbb\046\uffbb\047\uffbb" +
    "\001\002\000\030\004\031\005\034\006\030\007\026\021" +
    "\015\027\017\030\032\033\023\045\041\050\014\052\027" +
    "\001\002\000\044\010\uffbc\013\uffbc\014\uffbc\015\uffbc\017" +
    "\uffbc\022\uffbc\025\uffbc\026\uffbc\031\uffbc\032\uffbc\034\uffbc" +
    "\037\uffbc\040\uffbc\042\uffbc\043\uffbc\046\uffbc\047\uffbc\001" +
    "\002\000\050\010\uffb7\012\076\013\uffb7\014\uffb7\015\uffb7" +
    "\017\uffb7\022\uffb7\025\uffb7\026\uffb7\030\075\031\uffb7\032" +
    "\uffb7\034\uffb7\037\uffb7\040\uffb7\042\uffb7\043\uffb7\046\uffb7" +
    "\047\uffb7\001\002\000\030\004\031\005\034\006\030\007" +
    "\026\021\015\027\017\030\032\033\023\045\041\050\014" +
    "\052\027\001\002\000\044\010\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\022\uffc3\025\uffc3\026\uffc3\031\uffc3\032\uffc3" +
    "\034\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\046\uffc3\047" +
    "\uffc3\001\002\000\044\010\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\017\uffbd\022\uffbd\025\uffbd\026\uffbd\031\uffbd\032\uffbd\034" +
    "\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\046\uffbd\047\uffbd" +
    "\001\002\000\044\010\uffc6\013\uffc6\014\uffc6\015\uffc6\017" +
    "\uffc6\022\uffc6\025\055\026\uffc6\031\uffc6\032\uffc6\034\054" +
    "\037\uffc6\040\uffc6\042\uffc6\043\uffc6\046\uffc6\047\uffc6\001" +
    "\002\000\044\010\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0" +
    "\022\uffc0\025\uffc0\026\uffc0\031\uffc0\032\uffc0\034\uffc0\037" +
    "\uffc0\040\uffc0\042\uffc0\043\uffc0\046\uffc0\047\uffc0\001\002" +
    "\000\040\010\uffc9\013\uffc9\014\045\015\uffc9\017\044\022" +
    "\052\026\uffc9\031\uffc9\032\046\037\047\040\uffc9\042\050" +
    "\043\051\046\uffc9\047\043\001\002\000\020\010\uffd0\013" +
    "\uffd0\015\uffd0\026\uffd0\031\uffd0\040\uffd0\046\uffd0\001\002" +
    "\000\044\010\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\022" +
    "\uffbf\025\uffbf\026\uffbf\031\uffbf\032\uffbf\034\uffbf\037\uffbf" +
    "\040\uffbf\042\uffbf\043\uffbf\046\uffbf\047\uffbf\001\002\000" +
    "\044\010\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\022\uffb9" +
    "\025\uffb9\026\uffb9\031\uffb9\032\uffb9\034\uffb9\037\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\046\uffb9\047\uffb9\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\044" +
    "\010\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\022\uffc7\025" +
    "\055\026\uffc7\031\uffc7\032\uffc7\034\054\037\uffc7\040\uffc7" +
    "\042\uffc7\043\uffc7\046\uffc7\047\uffc7\001\002\000\030\004" +
    "\031\005\034\006\030\007\026\021\015\027\017\030\032" +
    "\033\023\045\041\050\014\052\027\001\002\000\030\004" +
    "\031\005\034\006\030\007\026\021\015\027\017\030\032" +
    "\033\023\045\041\050\014\052\027\001\002\000\044\010" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\022\uffc5\025\uffc5" +
    "\026\uffc5\031\uffc5\032\uffc5\034\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\043\uffc5\046\uffc5\047\uffc5\001\002\000\044\010\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\017\uffc4\022\uffc4\025\uffc4\026" +
    "\uffc4\031\uffc4\032\uffc4\034\uffc4\037\uffc4\040\uffc4\042\uffc4" +
    "\043\uffc4\046\uffc4\047\uffc4\001\002\000\024\010\uffca\013" +
    "\uffca\015\uffca\022\052\026\uffca\031\uffca\037\047\040\uffca" +
    "\046\uffca\001\002\000\024\010\uffcf\013\uffcf\015\uffcf\022" +
    "\052\026\uffcf\031\uffcf\037\047\040\uffcf\046\uffcf\001\002" +
    "\000\044\010\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\022" +
    "\uffc8\025\055\026\uffc8\031\uffc8\032\uffc8\034\054\037\uffc8" +
    "\040\uffc8\042\uffc8\043\uffc8\046\uffc8\047\uffc8\001\002\000" +
    "\024\010\uffce\013\uffce\015\uffce\022\052\026\uffce\031\uffce" +
    "\037\047\040\uffce\046\uffce\001\002\000\024\010\uffcc\013" +
    "\uffcc\015\uffcc\022\052\026\uffcc\031\uffcc\037\047\040\uffcc" +
    "\046\uffcc\001\002\000\024\010\uffcb\013\uffcb\015\uffcb\022" +
    "\052\026\uffcb\031\uffcb\037\047\040\uffcb\046\uffcb\001\002" +
    "\000\024\010\uffcd\013\uffcd\015\uffcd\022\052\026\uffcd\031" +
    "\uffcd\037\047\040\uffcd\046\uffcd\001\002\000\010\010\072" +
    "\015\070\031\071\001\002\000\030\004\031\005\034\006" +
    "\030\007\026\021\015\027\017\030\032\033\023\045\041" +
    "\050\014\052\027\001\002\000\044\010\uffba\013\uffba\014" +
    "\uffba\015\uffba\017\uffba\022\uffba\025\uffba\026\uffba\031\uffba" +
    "\032\uffba\034\uffba\037\uffba\040\uffba\042\uffba\043\uffba\046" +
    "\uffba\047\uffba\001\002\000\030\004\031\005\034\006\030" +
    "\007\026\021\015\027\017\030\032\033\023\045\041\050" +
    "\014\052\027\001\002\000\020\010\uffd1\013\uffd1\015\uffd1" +
    "\026\uffd1\031\uffd1\040\uffd1\046\uffd1\001\002\000\020\010" +
    "\uffd2\013\uffd2\015\uffd2\026\uffd2\031\uffd2\040\uffd2\046\uffd2" +
    "\001\002\000\032\004\031\005\034\006\030\007\026\021" +
    "\015\027\017\030\032\031\uffdb\033\023\045\041\050\014" +
    "\052\027\001\002\000\030\004\031\005\034\006\030\007" +
    "\026\021\015\027\017\030\032\033\023\045\041\050\014" +
    "\052\027\001\002\000\010\010\072\015\070\046\100\001" +
    "\002\000\046\010\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6" +
    "\022\uffb6\025\uffb6\026\uffb6\031\uffb6\032\uffb6\034\uffb6\037" +
    "\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6" +
    "\001\002\000\012\010\072\015\070\026\104\031\uffdc\001" +
    "\002\000\004\031\103\001\002\000\044\010\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\022\uffb8\025\uffb8\026\uffb8\031" +
    "\uffb8\032\uffb8\034\uffb8\037\uffb8\040\uffb8\042\uffb8\043\uffb8" +
    "\046\uffb8\047\uffb8\001\002\000\032\004\031\005\034\006" +
    "\030\007\026\021\015\027\017\030\032\031\uffdb\033\023" +
    "\045\041\050\014\052\027\001\002\000\004\031\uffdd\001" +
    "\002\000\044\010\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\022\uffc1\025\uffc1\026\uffc1\031\uffc1\032\uffc1\034\uffc1\037" +
    "\uffc1\040\uffc1\042\uffc1\043\uffc1\046\uffc1\047\uffc1\001\002" +
    "\000\030\004\031\005\034\006\030\007\026\021\015\027" +
    "\017\030\032\033\023\045\041\050\014\052\027\001\002" +
    "\000\010\010\072\015\070\031\111\001\002\000\044\010" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\022\uffc2\025\uffc2" +
    "\026\uffc2\031\uffc2\032\uffc2\034\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\043\uffc2\046\uffc2\047\uffc2\001\002\000\036\002\ufffd" +
    "\004\ufffd\016\ufffd\023\ufffd\024\ufffd\036\ufffd\040\ufffd\041" +
    "\ufffd\051\ufffd\053\ufffd\054\ufffd\057\ufffd\060\ufffd\062\ufffd" +
    "\001\002\000\004\046\114\001\002\000\004\013\115\001" +
    "\002\000\036\002\ufffa\004\ufffa\016\ufffa\023\ufffa\024\ufffa" +
    "\036\ufffa\040\ufffa\041\ufffa\051\ufffa\053\ufffa\054\ufffa\057" +
    "\ufffa\060\ufffa\062\ufffa\001\002\000\032\002\uffff\004\uffff" +
    "\023\uffff\024\uffff\036\uffff\040\uffff\041\uffff\051\uffff\053" +
    "\uffff\054\uffff\057\uffff\060\uffff\001\002\000\004\004\123" +
    "\001\002\000\006\002\ufff8\060\117\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufff9\001\002\000\004\030\124" +
    "\001\002\000\006\004\127\031\ufff4\001\002\000\004\031" +
    "\ufff5\001\002\000\004\031\137\001\002\000\012\012\134" +
    "\021\015\027\017\050\014\001\002\000\006\026\131\031" +
    "\ufff3\001\002\000\004\004\127\001\002\000\004\031\ufff2" +
    "\001\002\000\006\026\ufff1\031\ufff1\001\002\000\004\046" +
    "\135\001\002\000\010\021\015\027\017\050\014\001\002" +
    "\000\006\026\ufff0\031\ufff0\001\002\000\012\021\015\027" +
    "\017\040\uffee\050\014\001\002\000\004\040\142\001\002" +
    "\000\004\040\uffef\001\002\000\032\004\ufffe\016\007\023" +
    "\ufffe\024\ufffe\036\ufffe\040\ufffe\041\ufffe\051\ufffe\053\ufffe" +
    "\054\ufffe\057\ufffe\062\012\001\002\000\026\004\155\023" +
    "\154\024\147\036\156\040\150\041\uffeb\051\152\053\146" +
    "\054\157\057\160\001\002\000\004\044\231\001\002\000" +
    "\004\041\227\001\002\000\004\004\225\001\002\000\004" +
    "\004\221\001\002\000\032\004\ufffe\016\007\023\ufffe\024" +
    "\ufffe\036\ufffe\040\ufffe\041\ufffe\051\ufffe\053\ufffe\054\ufffe" +
    "\057\ufffe\062\012\001\002\000\026\004\155\023\154\024" +
    "\147\036\156\040\150\041\uffeb\051\152\053\146\054\157" +
    "\057\160\001\002\000\030\004\031\005\034\006\030\007" +
    "\026\021\015\027\017\030\032\033\023\045\041\050\014" +
    "\052\027\001\002\000\026\004\uffe0\023\uffe0\024\uffe0\036" +
    "\uffe0\040\uffe0\041\uffe0\051\uffe0\053\uffe0\054\uffe0\057\uffe0" +
    "\001\002\000\032\004\031\005\034\006\030\007\026\013" +
    "\203\021\015\027\017\030\032\033\023\045\041\050\014" +
    "\052\027\001\002\000\012\012\076\030\173\044\uffb7\055" +
    "\172\001\002\000\030\004\031\005\034\006\030\007\026" +
    "\021\015\027\017\030\032\033\023\045\041\050\014\052" +
    "\027\001\002\000\004\004\163\001\002\000\030\004\031" +
    "\005\034\006\030\007\026\021\015\027\017\030\032\033" +
    "\023\045\041\050\014\052\027\001\002\000\010\010\072" +
    "\015\070\040\150\001\002\000\026\004\uffe8\023\uffe8\024" +
    "\uffe8\036\uffe8\040\uffe8\041\uffe8\051\uffe8\053\uffe8\054\uffe8" +
    "\057\uffe8\001\002\000\004\013\164\001\002\000\026\004" +
    "\uffde\023\uffde\024\uffde\036\uffde\040\uffde\041\uffde\051\uffde" +
    "\053\uffde\054\uffde\057\uffde\001\002\000\012\010\072\013" +
    "\uffd9\015\070\026\170\001\002\000\004\013\167\001\002" +
    "\000\026\004\uffe4\023\uffe4\024\uffe4\036\uffe4\040\uffe4\041" +
    "\uffe4\051\uffe4\053\uffe4\054\uffe4\057\uffe4\001\002\000\030" +
    "\004\031\005\034\006\030\007\026\021\015\027\017\030" +
    "\032\033\023\045\041\050\014\052\027\001\002\000\004" +
    "\013\uffda\001\002\000\004\057\177\001\002\000\032\004" +
    "\031\005\034\006\030\007\026\021\015\027\017\030\032" +
    "\031\uffdb\033\023\045\041\050\014\052\027\001\002\000" +
    "\004\031\175\001\002\000\004\013\176\001\002\000\026" +
    "\004\uffe3\023\uffe3\024\uffe3\036\uffe3\040\uffe3\041\uffe3\051" +
    "\uffe3\053\uffe3\054\uffe3\057\uffe3\001\002\000\030\004\031" +
    "\005\034\006\030\007\026\021\015\027\017\030\032\033" +
    "\023\045\041\050\014\052\027\001\002\000\010\010\072" +
    "\015\070\040\150\001\002\000\026\004\uffe7\023\uffe7\024" +
    "\uffe7\036\uffe7\040\uffe7\041\uffe7\051\uffe7\053\uffe7\054\uffe7" +
    "\057\uffe7\001\002\000\010\010\072\013\204\015\070\001" +
    "\002\000\026\004\uffe1\023\uffe1\024\uffe1\036\uffe1\040\uffe1" +
    "\041\uffe1\051\uffe1\053\uffe1\054\uffe1\057\uffe1\001\002\000" +
    "\026\004\uffe2\023\uffe2\024\uffe2\036\uffe2\040\uffe2\041\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\057\uffe2\001\002\000\010\010" +
    "\072\015\070\040\150\001\002\000\030\004\uffea\023\uffea" +
    "\024\uffea\035\207\036\uffea\040\uffea\041\uffea\051\uffea\053" +
    "\uffea\054\uffea\057\uffea\001\002\000\004\040\150\001\002" +
    "\000\026\004\uffe9\023\uffe9\024\uffe9\036\uffe9\040\uffe9\041" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\057\uffe9\001\002\000\004" +
    "\041\uffec\001\002\000\026\004\155\023\154\024\147\036" +
    "\156\040\150\041\uffeb\051\152\053\146\054\157\057\160" +
    "\001\002\000\004\041\214\001\002\000\032\004\ufff6\013" +
    "\216\023\ufff6\024\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6" +
    "\051\ufff6\053\ufff6\054\ufff6\057\ufff6\001\002\000\030\004" +
    "\uffd6\023\uffd6\024\uffd6\035\uffd6\036\uffd6\040\uffd6\041\uffd6" +
    "\051\uffd6\053\uffd6\054\uffd6\057\uffd6\001\002\000\034\002" +
    "\ufff7\004\ufff7\023\ufff7\024\ufff7\035\ufff7\036\ufff7\040\ufff7" +
    "\041\ufff7\051\ufff7\053\ufff7\054\ufff7\057\ufff7\060\ufff7\001" +
    "\002\000\006\013\uffd7\026\223\001\002\000\004\013\222" +
    "\001\002\000\010\012\076\013\uffb7\026\uffb7\001\002\000" +
    "\026\004\uffe5\023\uffe5\024\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\051\uffe5\053\uffe5\054\uffe5\057\uffe5\001\002\000\004\004" +
    "\221\001\002\000\004\013\uffd8\001\002\000\004\013\226" +
    "\001\002\000\026\004\uffdf\023\uffdf\024\uffdf\036\uffdf\040" +
    "\uffdf\041\uffdf\051\uffdf\053\uffdf\054\uffdf\057\uffdf\001\002" +
    "\000\010\002\ufff6\013\216\060\ufff6\001\002\000\006\002" +
    "\uffed\060\uffed\001\002\000\030\004\031\005\034\006\030" +
    "\007\026\021\015\027\017\030\032\033\023\045\041\050" +
    "\014\052\027\001\002\000\010\010\072\013\233\015\070" +
    "\001\002\000\026\004\uffe6\023\uffe6\024\uffe6\036\uffe6\040" +
    "\uffe6\041\uffe6\051\uffe6\053\uffe6\054\uffe6\057\uffe6\001\002" +
    "\000\004\044\235\001\002\000\030\004\031\005\034\006" +
    "\030\007\026\021\015\027\017\030\032\033\023\045\041" +
    "\050\014\052\027\001\002\000\010\010\072\013\237\015" +
    "\070\001\002\000\036\002\ufffb\004\ufffb\016\ufffb\023\ufffb" +
    "\024\ufffb\036\ufffb\040\ufffb\041\ufffb\051\ufffb\053\ufffb\054" +
    "\ufffb\057\ufffb\060\ufffb\062\ufffb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\007\005\010\001\001\000\002" +
    "\001\001\000\006\010\120\011\117\001\001\000\006\004" +
    "\115\005\010\001\001\000\002\001\001\000\004\006\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\024\007\023\014\037\015\036\016\034\017" +
    "\032\020\035\021\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\024\017\105\020\035\021\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\024\007\066\014\037\015" +
    "\036\016\034\017\032\020\035\021\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\024\015\065\016\034\017" +
    "\032\020\035\021\041\001\001\000\016\006\024\015\064" +
    "\016\034\017\032\020\035\021\041\001\001\000\016\006" +
    "\024\015\063\016\034\017\032\020\035\021\041\001\001" +
    "\000\016\006\024\015\062\016\034\017\032\020\035\021" +
    "\041\001\001\000\014\006\024\016\061\017\032\020\035" +
    "\021\041\001\001\000\016\006\024\015\060\016\034\017" +
    "\032\020\035\021\041\001\001\000\016\006\024\015\057" +
    "\016\034\017\032\020\035\021\041\001\001\000\014\006" +
    "\024\016\052\017\032\020\035\021\041\001\001\000\002" +
    "\001\001\000\012\006\024\017\056\020\035\021\041\001" +
    "\001\000\012\006\024\017\055\020\035\021\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\024\014\073\015\036\016\034\017\032" +
    "\020\035\021\041\001\001\000\002\001\001\000\020\006" +
    "\024\014\072\015\036\016\034\017\032\020\035\021\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\024\007\100\014\037\015\036\016\034\017\032\020\035" +
    "\021\041\032\101\001\001\000\022\006\024\007\076\014" +
    "\037\015\036\016\034\017\032\020\035\021\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\024\007\100" +
    "\014\037\015\036\016\034\017\032\020\035\021\041\032" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\024\007\107\014\037\015\036\016\034\017\032\020" +
    "\035\021\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\121\011\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\125\026\124\027\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\132\001\001\000\002\001\001\000\006\026\131\027\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\135\001\001\000\002\001\001\000\006" +
    "\006\140\023\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\142\005\010\001\001\000\012\012\144" +
    "\013\150\021\143\025\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\216\030\217" +
    "\001\001\000\006\004\211\005\010\001\001\000\012\012" +
    "\210\013\150\021\143\025\152\001\001\000\022\006\024" +
    "\007\204\014\037\015\036\016\034\017\032\020\035\021" +
    "\041\001\001\000\002\001\001\000\022\006\024\007\201" +
    "\014\037\015\036\016\034\017\032\020\035\021\041\001" +
    "\001\000\002\001\001\000\024\006\024\007\164\014\037" +
    "\015\036\016\034\017\032\020\035\021\041\031\165\001" +
    "\001\000\002\001\001\000\022\006\024\007\160\014\037" +
    "\015\036\016\034\017\032\020\035\021\041\001\001\000" +
    "\004\025\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\024\007\164\014\037\015\036" +
    "\016\034\017\032\020\035\021\041\031\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\024\007\100" +
    "\014\037\015\036\016\034\017\032\020\035\021\041\032" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\024\007\177\014\037\015\036\016" +
    "\034\017\032\020\035\021\041\001\001\000\004\025\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\205\001\001\000\002" +
    "\001\001\000\004\025\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\212\013\150\021\143\025\152" +
    "\001\001\000\002\001\001\000\004\024\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\216\030\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\227\001\001\000\002\001" +
    "\001\000\022\006\024\007\231\014\037\015\036\016\034" +
    "\017\032\020\035\021\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\024\007\235" +
    "\014\037\015\036\016\034\017\032\020\035\021\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // name ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new nameSubNode(new identNode(id.identifierText,id.linenum,id.colnum),e,id.linenum,id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // name ::= IDENTIFIER 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new identNode(id.identifierText,id.linenum,id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= IDENTIFIER LPAREN actuals RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fctUnitCallNode(new identNode(id.identifierText,id.linenum,id.colnum),a,id.linenum,id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode n = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unit ::= LPAREN expr RPAREN 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new parenthExprNode(e,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken s = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new strLitNode(s.stringLitteralText,s.stringText,s.linenum,s.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXCharLitToken c = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new charLitNode(c.charLitteralText,c.charValue, c.linenum,c.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unit ::= INTLIT 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new intLitNode(i.intValue,i.linenum,i.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new falseNode(f.linenum,f.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new trueNode(t.linenum,t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = u;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new notUnaryNode(u,u.linenum,u.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary ::= type LPAREN expr RPAREN 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new castNode(t,e,t.linenum,t.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = u; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new binaryPriNode(p,sym.SLASH,u,p.linenum,p.colnum, new Types(Types.Integer));
              CUP$parser$result = new java_cup.runtime.Symbol(12/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new binaryPriNode(p,sym.TIMES,u,p.linenum,p.colnum, new Types(Types.Integer));
              CUP$parser$result = new java_cup.runtime.Symbol(12/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new binaryOpFacNode(f,sym.MINUS,p,f.linenum,f.colnum,new Types(Types.Integer)); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new binaryOpFacNode(f,sym.PLUS,p,f.linenum,f.colnum,new Types(Types.Integer)); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f0 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new logicTermNode(f0,sym.NOTEQ,f1,f0.linenum,f0.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f0 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new logicTermNode(f0,sym.LT,f1,f0.linenum,f0.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f0 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new logicTermNode(f0,sym.GT,f1,f0.linenum,f0.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f0 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new logicTermNode(f0,sym.EQ,f1,f0.linenum,f0.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f0 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new logicTermNode(f0,sym.GEQ,f1,f0.linenum,f0.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode f0 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new logicTermNode(f0,sym.LEQ,f1,f0.linenum,f0.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t;
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr COR term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new orExprNode(e,t,e.linenum,e.colnum,new Types(Types.Boolean));
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr CAND term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new andExprNode(e,t,e.linenum,e.colnum,new Types(Types.Boolean)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new boolTypeNode(b.linenum,b.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new charTypeNode(c.linenum,c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new intTypeNode(i.linenum,i.colnum);  
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= LBRACE varDecls stmts RBRACE optsimi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode v = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new blockNode(v,s,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // readlist ::= name 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode n = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new readNode(n,readNode.NULL,n.linenum,n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*readlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // readlist ::= name COMMA readlist 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode n = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode r = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new readNode(n,r,n.linenum,n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*readlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // printlist ::= expr 
            {
              displayNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new displayNode(e,displayNode.NULL,e.linenum,e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*printlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // printlist ::= expr COMMA printlist 
            {
              displayNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		displayNode pl = (displayNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new displayNode(e,pl,e.linenum,e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*printlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actuals ::= 
            {
              argsNode RESULT = null;
		 RESULT = nullArgsNode.NULL;
              CUP$parser$result = new java_cup.runtime.Symbol(24/*actuals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // actuals ::= expr 
            {
              argsNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new actualsNode(e,nullArgsNode.NULL,e.linenum,e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*actuals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // actuals ::= expr COMMA actuals 
            {
              argsNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new actualsNode(e,a,e.linenum,e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*actuals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_CONTINUE IDENTIFIER SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new continueNode(new identNode(id.identifierText,id.linenum,id.colnum),c.linenum,c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= rw_BREAK IDENTIFIER SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new breakNode(new identNode(id.identifierText,id.linenum,id.colnum),b.linenum,b.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= block 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode b = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new returnNode(r.linenum,r.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= rw_RETURN expr SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new returnNode(e,r.linenum,r.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= IDENTIFIER LPAREN actuals RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new fctCallNode(new identNode(id.identifierText,id.linenum,id.colnum),a,id.linenum,id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= rw_PRINT printlist SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken p = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		displayNode pl = (displayNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new printNode(pl,p.linenum,p.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= rw_READ readlist SEMI 
            {
              stmtNode RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken re = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode r = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stmtReadNode(r,re.linenum,re.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= name ASG expr SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exprNode n = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new asgNode(n,e,n.linenum,n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= IDENTIFIER COLON rw_FOR expr block 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode b = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new forIdentNode(new identNode(id.identifierText,id.linenum,id.colnum),e,b,id.linenum,id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= rw_FOR expr block 
            {
              stmtNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode b = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new forNode(e,b,f.linenum,f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= rw_IF expr block rw_ELSE block 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtNode b0 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode b1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ifThenNode(e,b0,b1,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= rw_IF expr block 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode b = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ifThenNode(e,b,new nullStmtNode(),i.linenum,i.colnum);
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= 
            {
              stmtsNode RESULT = null;
		 RESULT = stmtsNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmts ::= stmt stmts 
            {
              stmtsNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode st = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtsNode sts = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new stmtsNode(st,sts,st.linenum,st.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcDecl ::= rw_FUNC IDENTIFIER LPAREN formals RPAREN optType LBRACE varDecls stmts RBRACE optsimi 
            {
              methodDeclNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int formleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int formright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		argDeclsNode form = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int oTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		typeNode oT = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode vD = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new methodDeclNode(new identNode(id.identifierText,id.linenum,id.colnum),form,oT,vD,s,f.linenum,f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*funcDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // optType ::= 
            {
              typeNode RESULT = null;
		 RESULT = typeNode.NULL;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*optType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optType ::= type 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*optType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalDecl ::= IDENTIFIER LBRACKET RBRACKET type 
            {
              argDeclNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new arrayArgDeclNode(new identNode(i.identifierText,i.linenum,i.colnum),t,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*formalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalDecl ::= IDENTIFIER type 
            {
              argDeclNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new valArgDeclNode(new identNode(i.identifierText,i.linenum,i.colnum),t,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*formalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // someFormals ::= formalDecl COMMA someFormals 
            {
              argDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argDeclNode f = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclsNode F = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new comaDeclsNode(f,F,f.linenum,f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*someFormals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // someFormals ::= formalDecl 
            {
              argDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclNode f = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new oneDeclNode(f,f.linenum,f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*someFormals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formals ::= 
            {
              argDeclsNode RESULT = null;
		 RESULT = argDeclsNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formals ::= someFormals 
            {
              argDeclsNode RESULT = null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclsNode F = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = F; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optsimi ::= 
            {
              exprNode RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*optsimi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optsimi ::= SEMI 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*optsimi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcDecls ::= 
            {
              methodDeclsNode RESULT = null;
		 RESULT = methodDeclsNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*funcDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcDecls ::= funcDecl funcDecls 
            {
              methodDeclsNode RESULT = null;
		int f0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		methodDeclNode f0 = (methodDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode f1 = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new methodDeclsNode(f0,f1,f0.linenum,f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*funcDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= rw_VAR IDENTIFIER type LBRACKET INTLIT RBRACKET SEMI 
            {
              declNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CSXIdentifierToken id = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIntLitToken in = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT  = new arrayDeclNode(new identNode(id.identifierText,id.linenum,id.colnum),t,
				new intLitNode(in.intValue,in.linenum,in.colnum),v.linenum,v.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDecl ::= rw_CONST IDENTIFIER ASG expr SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new constDeclNode(new identNode(i.identifierText,i.linenum,i.colnum)
				,e,c.linenum,c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDecl ::= rw_VAR IDENTIFIER type SEMI 
            {
              declNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new varDeclNode(new identNode(i.identifierText,i.linenum,i.colnum),t,
				exprNode.NULL,v.linenum,v.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varDecl ::= rw_VAR IDENTIFIER type ASG expr SEMI 
            {
              declNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new varDeclNode(new identNode(i.identifierText,i.linenum,i.colnum),t,e,v.linenum,v.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // varDecls ::= 
            {
              fieldDeclsNode RESULT = null;
		 RESULT = fieldDeclsNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*varDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // varDecls ::= varDecl varDecls 
            {
              fieldDeclsNode RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode vd = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vsDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vsDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		fieldDeclsNode vsD = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new fieldDeclsNode(vd,vsD,vd.linenum,vd.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*varDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= rw_PACKAGE IDENTIFIER varDecls funcDecls 
            {
              ProgramNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXToken p = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vardeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fieldDeclsNode vardecls = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fncdeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fncdeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode fncdecls = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProgramNode(new identNode(i.identifierText,i.linenum,i.colnum),
				new memberDeclsNode(vardecls,fncdecls,vardecls.linenum,vardecls.colnum),p.linenum,p.colnum);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

