## Test 38
  Created: Dec 2002; Modified Jun 2018

 The 8-queens problem

##

package p38csx
const dim = 8;
var a1 int = 1;
var b1 int = 2;
var c1 int = 3;
var d1 int = 4;
var e1 int = 5;
var f1 int = 6;
var g1 int = 7;
var h1 int = 8;
var a2 int;
var b2 int;
var c2 int;
var d2 int;
var e2 int;
var f2 int;
var g2 int;
var h2 int;
var count int = 0;
var flag1 bool;
var flag2 bool;
var flag3 bool;
var flag4 bool;
var flag5 bool;
var flag6 bool;
var flag7 bool;
func compatible(x1 int, x2 int, y1 int, y2 int) bool {
    if x2 == y2 {
        return false;
    }
    if ((y2 - x2) == (y1 - x1)) || ((x2 - y2) == (y1 - x1)) {
        return false;
    } else {
        return true;
    }
} // func compatible
func main() {
    print "Testing Program p38csx (8 queens problem)", "\n";
    a2 = 1;
    b2 = 1;
    c2 = 1;
    d2 = 1;
    e2 = 1;
    f2 = 1;
    g2 = 1;
    h2 = 1;
    for a2 <= 8 {
        for b2 <= 8 {
            flag1 = compatible(a1, a2, b1, b2);
            if flag1 {
                for c2 <= 8 {
                    flag1 = compatible(a1, a2, c1, c2);
                    flag2 = compatible(b1, b2, c1, c2);
                    if flag1 && flag2 {
                        for d2 <= 8 {
                            flag1 = compatible(a1, a2, d1, d2);
                            flag2 = compatible(b1, b2, d1, d2);
                            flag3 = compatible(c1, c2, d1, d2);
                            if (flag1 && flag2) && flag3 {
                                for e2 <= 8 {
                                    flag1 = compatible(a1, a2, e1, e2);
                                    flag2 = compatible(b1, b2, e1, e2);
                                    flag3 = compatible(c1, c2, e1, e2);
                                    flag4 = compatible(d1, d2, e1, e2);
                                    if ((flag1 && flag2) && flag3) && flag4 {
                                        for f2 <= 8 {
                                            flag1 = compatible(a1, a2, f1, f2);
                                            flag2 = compatible(b1, b2, f1, f2);
                                            flag3 = compatible(c1, c2, f1, f2);
                                            flag4 = compatible(d1, d2, f1, f2);
                                            flag5 = compatible(e1, e2, f1, f2);
                                            if (((flag1 && flag2) && flag3) && flag4) && flag5 {
                                                for g2 <= 8 {
                                                    flag1 = compatible(a1, a2, g1, g2);
                                                    flag2 = compatible(b1, b2, g1, g2);
                                                    flag3 = compatible(c1, c2, g1, g2);
                                                    flag4 = compatible(d1, d2, g1, g2);
                                                    flag5 = compatible(e1, e2, g1, g2);
                                                    flag6 = compatible(f1, f2, g1, g2);
                                                    if ((((flag1 && flag2) && flag3) && flag4) && flag5) && flag6 {
                                                        for h2 <= 8 {
                                                            flag1 = compatible(a1, a2, h1, h2);
                                                            flag2 = compatible(b1, b2, h1, h2);
                                                            flag3 = compatible(c1, c2, h1, h2);
                                                            flag4 = compatible(d1, d2, h1, h2);
                                                            flag5 = compatible(e1, e2, h1, h2);
                                                            flag6 = compatible(f1, f2, h1, h2);
                                                            flag7 = compatible(g1, g2, h1, h2);
                                                            if (((((flag1 && flag2) && flag3) && flag4) && flag5) && flag6) && flag7 {
                                                                count = count + 1;
                                                                print "\n", "Solution#", count, " is:", "\n";
                                                                print " ", a2, " ", b2, " ", c2, " ", d2, " ", e2, " ", f2, " ", g2, " ", h2, "\n";
                                                            }
                                                            h2 = h2 + 1;
                                                        } // for
                                                    }
                                                    g2 = g2 + 1;
                                                    h2 = 1;
                                                } // for
                                            }
                                            f2 = f2 + 1;
                                            g2 = 1;
                                            h2 = 1;
                                        } // for
                                    }
                                    e2 = e2 + 1;
                                    f2 = 1;
                                    g2 = 1;
                                    h2 = 1;
                                } // for
                            }
                            d2 = d2 + 1;
                            e2 = 1;
                            f2 = 1;
                            g2 = 1;
                            h2 = 1;
                        } // for
                    }
                    c2 = c2 + 1;
                    d2 = 1;
                    e2 = 1;
                    f2 = 1;
                    g2 = 1;
                    h2 = 1;
                } // for
            }
            b2 = b2 + 1;
            c2 = 1;
            d2 = 1;
            e2 = 1;
            f2 = 1;
            g2 = 1;
            h2 = 1;
        } // for
        a2 = a2 + 1;
        b2 = 1;
        c2 = 1;
        d2 = 1;
        e2 = 1;
        f2 = 1;
        g2 = 1;
        h2 = 1;
    } // for
} // func main
// package p38csx
